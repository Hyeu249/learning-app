name: Build, push Docker Image and deploy to UAT
on:
  push:
    tags:
      - 'uat-v[0-9]+.[0-9]+.[0-9]+'
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Docker tag
        id: set_tag
        run: echo "::set-output name=tag::${{ github.ref }}"

      - name: Extract tag name
        id: extract_tag
        run: |
          tag_name=${{ steps.set_tag.outputs.tag }}
          if [[ $tag_name == refs/tags/* ]]; then
            tag_name=${tag_name#refs/tags/}
          fi
          echo "::set-output name=tag_name::${tag_name}"

      - name: Login Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: ./
          file: ./Dockerfile.amd64
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: thttechno/vsico:quan-ly-tau-thuy-${{ steps.extract_tag.outputs.tag_name }}

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.UAT_KUBECONFIG }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Create namespace and ignore error if it already exists
        run: kubectl create namespace quan-ly-tau
        continue-on-error: true

      - name: Create docker-registry secret and ignore error if it already exists
        run: kubectl create --namespace quan-ly-tau secret docker-registry docker-hub-registry --docker-username=${{ secrets.DOCKER_REGISTRY_USERNAME }} --docker-password=${{ secrets.DOCKER_REGISTRY_PASSWORD }}
        continue-on-error: true

      - name: Upgrade/Install helm chart
        run: |
          helm upgrade --install --wait --wait-for-jobs --timeout 30m \
            --set image.tag=quan-ly-tau-thuy-${{ steps.extract_tag.outputs.tag_name }} \
            --set image.pullPolicy=Always \
            --set service.type=LoadBalancer \
            --set service.port=9988 \
            --set ingress.enabled=false \
            --set postgresql.primary.pgHbaConfiguration=null \
            quan-ly-tau ./helmchart --namespace quan-ly-tau
